/* Text to put at the beginning of the generated file. Testing */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#define PK_LEN 49

#define SIG_LEN 149

typedef struct pixel_sk {
  const uint8_t *sk;
  size_t sk_len;
} pixel_sk;

/**
 * A wrapper that holds the output of key generation function.
 */
typedef struct pixel_keys {
  const uint8_t *pk;
  pixel_sk sk;
  const uint8_t *pop;
} pixel_keys;

/**
 * This function aggregates the signatures without checking if a signature is valid or not.
 * It does check that all the signatures are for the same time stamp.
 * It panics if ciphersuite fails or time stamp is not consistent.
 */
const uint8_t *c_aggregation(const uint8_t *sig_list, size_t sig_num);

/**
 * Input a pointer to the seed, and its length.
 * The seed needs to be at least
 * 32 bytes long. Output the key pair.
 * Generate a pair of public keys and secret keys,
 * and a proof of possession of the public key.
 */
pixel_keys c_keygen(const uint8_t *seed, size_t seed_len);

/**
 * Input a secret key, a time stamp that matches the timestamp of the secret key,
 * the public parameter, and a message in the form of a byte string,
 * output a signature. If the time stamp is not the same as the secret key,
 * returns an error
 */
const uint8_t *c_sign_present(const uint8_t *sk,
                              size_t sk_len,
                              const uint8_t *msg,
                              size_t msg_len,
                              uint64_t tar_time);

/**
 * Input a secret key, and a time stamp,
 * return an updated key for that time stamp.
 * Requires a seed for re-randomization.
 */
pixel_sk c_sk_update(const uint8_t *sk,
                     size_t sk_len,
                     const uint8_t *seed,
                     size_t seed_len,
                     uint64_t tar_time);

/**
 * Input a public key, the public parameter, a message in the form of a byte string,
 * and a signature, outputs true if signature is valid w.r.t. the inputs.
 */
bool c_verify(const uint8_t *pk, const uint8_t *msg, size_t msglen, const uint8_t *sig);
